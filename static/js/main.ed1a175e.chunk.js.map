{"version":3,"sources":["components/AudioMeasure/index.js","components/Subtitle/index.js","components/RasaAssistant/index.js","components/VoiceModule/SpeakRecognize.js","components/VoiceModule/SpeakSynthesisBeta.js","components/VoiceModule/index.js","components/CheatSheet/index.js","components/Live2DViewer/index.js","App.js","index.js"],"names":["useAudioMeasure","useReducer","state","action","type","payload","Error","audioLevel","dispatch","audioLevelRef","useRef","useEffect","current","playSound","url","audioContext","AudioContext","audioElement","Audio","play","then","frameId","audioStream","captureStream","analyser","createAnalyser","source","createMediaStreamSource","pcmData","Float32Array","fftSize","connect","render","getFloatTimeDomainData","sumSquares","amplitude","Math","sqrt","length","toFixed","requestAnimationFrame","addEventListener","disconnect","cancelAnimationFrame","pause","removeAttribute","remove","playSoundBeta","text","updateSubtitle","Promise","resolve","reject","crossOrigin","preload","resume","playSoundOmega","promise","audioData","audioBlob","Blob","window","URL","createObjectURL","getAudioLevel","Subtitle","props","className","noop","socketErrorEventNames","useAssistant","sockUrl","sockOpts","initSessionId","initMsg","onError","onUtter","sockRef","sessionIdRef","match","sockHostname","sockPath","sock","io","path","forEach","errorEventName","on","e","restartSession","sessInfo","console","log","handleBotUtter","close","useCallback","session_id","emit","triggerRestartSession","a","open","userUtter","message","send","msg","msgTpl","ts","Date","now","direction","metadata","botUtter","useSpeechRecognize","onResult","onNoMatch","useState","recognition","setRecognition","transcript","setTranscript","undefined","listening","dispatchListen","listenRef","recognizeObj","SpeechRecognition","webkitSpeechRecognition","onstart","onresult","event","final_transcript","i","resultIndex","results","isFinal","onnomatch","onerror","startRecognize","start","getListening","useSpeechSynthesis","speakFunc","useAsyncQueue","concurrency","add","id","setId","setText","idRef","textRef","getId","getText","incrementId","speakSynthesis","task","synthesizeSpeech","speechConfig","sdk","fromSubscription","synthesizer","speakTextAsync","result","error","useVoiceModule","transports","CheatSheet","Application","registerPlugin","TickerPlugin","Live2DModel","registerTicker","Ticker","Live2DViewer","containerRef","canvasRef","appRef","modelRef","useAsyncEffect","view","autoStart","backgroundColor","resizeTo","from","model","scale","set","updateFn","internalModel","motionManager","update","args","apply","coreModel","setParameterValueById","stage","addChild","children","x","width","ref","onClick","preventDefault","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed1a175e.chunk.js","sourcesContent":["import {useEffect, useReducer, useRef} from \"react\";\n\nconst useAudioMeasure = () => {\n  const [audioLevel, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"set\":\n        return action.payload;\n      case \"reset\":\n        return 0.0;\n      default:\n        throw new Error(\"Unexpected action\");\n    }\n  }, 0.0);\n\n  //const audioElement = useRef(new Audio());\n  //const audioContext = useRef();\n  const audioLevelRef = useRef(0);\n\n  useEffect(() => {\n    audioLevelRef.current = audioLevel;\n  }, [audioLevel]);\n\n  const getAudioLevel = () => {\n    return audioLevelRef.current;\n  };\n\n  const playSound = (url) => {\n    const audioContext = new AudioContext();\n    const audioElement = new Audio(url);\n    audioElement.play().then(() => {\n      const audioStream = audioElement.captureStream();\n      const analyser = audioContext.current.createAnalyser();\n      const source = audioContext.current.createMediaStreamSource(audioStream);\n      const pcmData = new Float32Array(analyser.fftSize);\n      let frameId;\n\n      source.connect(analyser);\n      const render = () => {\n        analyser.getFloatTimeDomainData(pcmData);\n        let sumSquares = 0.0;\n        for (let amplitude of pcmData) {\n          sumSquares += amplitude * amplitude;\n        }\n        dispatch({\n          type: \"set\",\n          payload: (Math.sqrt(sumSquares / pcmData.length) * 5).toFixed(1),\n        });\n        frameId = requestAnimationFrame(render);\n      };\n      render();\n\n      audioElement.addEventListener(\"ended\", () => {\n        source.disconnect();\n        analyser.disconnect();\n        cancelAnimationFrame(frameId);\n        audioElement.pause();\n        audioElement.removeAttribute(\"src\");\n        audioElement.remove();\n        dispatch({ type: \"reset\" });\n      });\n    });\n  };\n\n  const playSoundBeta = (text, updateSubtitle) => {\n    return new Promise((resolve, reject) => {\n      const audioContext = new AudioContext();\n      const audioElement = new Audio(\n        `http://localhost:5252/api/tts?text=\"${text}\"`\n      );\n      audioElement.crossOrigin = \"anonymous\";\n      audioElement.preload = \"auto\";\n      audioContext.resume().then(\n        audioElement.play().then(() => {\n          updateSubtitle(text);\n          const audioStream = audioElement.captureStream();\n          const analyser = audioContext.createAnalyser();\n          const source = audioContext.createMediaStreamSource(audioStream);\n          const pcmData = new Float32Array(analyser.fftSize);\n          let frameId;\n\n          source.connect(analyser);\n          const render = () => {\n            analyser.getFloatTimeDomainData(pcmData);\n            let sumSquares = 0.0;\n            for (let amplitude of pcmData) {\n              sumSquares += amplitude * amplitude;\n            }\n            dispatch({\n              type: \"set\",\n              payload: (Math.sqrt(sumSquares / pcmData.length) * 5).toFixed(1),\n            });\n            frameId = requestAnimationFrame(render);\n          };\n          render();\n\n          audioElement.addEventListener(\"ended\", () => {\n            updateSubtitle(\"\");\n            source.disconnect();\n            analyser.disconnect();\n            cancelAnimationFrame(frameId);\n            audioElement.pause();\n            audioElement.removeAttribute(\"src\");\n            audioElement.remove();\n            dispatch({ type: \"reset\" });\n            resolve();\n          });\n          audioElement.addEventListener(\"error\", () => {\n            reject();\n          });\n        })\n      );\n    });\n  };\n\n  const playSoundOmega = (promise, text, updateSubtitle) => {\n    return new Promise((resolve, reject) => {\n      const audioContext = new AudioContext();\n      promise.then((audioData) => {\n        const audioBlob = new Blob([audioData], {\n          type: \"audio/wav\",\n        });\n        const audioElement = new Audio(window.URL.createObjectURL(audioBlob));\n        audioElement.play().then(() => {\n          updateSubtitle(text);\n          const audioStream = audioElement.captureStream();\n          const analyser = audioContext.createAnalyser();\n          const source = audioContext.createMediaStreamSource(audioStream);\n          const pcmData = new Float32Array(analyser.fftSize);\n          let frameId;\n\n          source.connect(analyser);\n          const render = () => {\n            analyser.getFloatTimeDomainData(pcmData);\n            let sumSquares = 0.0;\n            for (let amplitude of pcmData) {\n              sumSquares += amplitude * amplitude;\n            }\n            dispatch({\n              type: \"set\",\n              payload: (Math.sqrt(sumSquares / pcmData.length) * 5).toFixed(1),\n            });\n            frameId = requestAnimationFrame(render);\n          };\n          render();\n\n          audioElement.addEventListener(\"ended\", () => {\n            updateSubtitle(\"\");\n            source.disconnect();\n            analyser.disconnect();\n            cancelAnimationFrame(frameId);\n            audioElement.pause();\n            audioElement.removeAttribute(\"src\");\n            audioElement.remove();\n            dispatch({ type: \"reset\" });\n            resolve();\n          });\n          audioElement.addEventListener(\"error\", () => {\n            reject();\n          });\n        });\n      });\n    });\n  };\n\n  return { playSound, playSoundBeta, playSoundOmega, getAudioLevel };\n};\n\nexport default useAudioMeasure;\n","import React from \"react\";\nimport \"../../css/subtitle.css\";\n\nconst Subtitle = (props) => {\n  return (\n    <div className=\"subtitle-text mx-auto text-center\">\n      <p>{(props.text !== \"\" || null) && <span>{props.text}</span>}</p>\n    </div>\n  );\n};\n\nexport default Subtitle;\n","import io from \"socket.io-client\";\nimport {useCallback, useEffect, useRef} from \"react\";\n\n// Custom version of react-rasa-assistant\nexport const useAssistant = ({\n  sockUrl,\n  sockOpts,\n  initSessionId,\n  initMsg,\n  onError = noop,\n  onUtter = noop,\n}) => {\n  const sockRef = useRef(null);\n  const sessionIdRef = useRef(null);\n\n  useEffect(() => {\n    const [, sockHostname, sockPath] = sockUrl.match(\n        /^((?:http|ws)s?:\\/\\/[^/]+)(\\/.*)$/\n      ),\n      sock = io(sockHostname, { path: sockPath, ...sockOpts });\n\n    sockRef.current = sock;\n\n    socketErrorEventNames.forEach((errorEventName) =>\n      sock.on(errorEventName, (e) => {\n        if (errorEventName === \"disconnect\" && e === \"io client disconnect\")\n          // this is fired on manual disconnects so not an error\n          return;\n\n        onError({ type: errorEventName, payload: e });\n      })\n    );\n\n    sock\n      .on(\"connect\", () => restartSession(sock, initSessionId))\n\n      .on(\"session_confirm\", (sessInfo) => {\n        // sessionIdRef.current = sessInfo.session_id;\n        sessionIdRef.current = sessInfo;\n        console.log(\n          \"New session created! : \" + sessionIdRef.current + \"/\" + sessInfo\n        );\n        if (initMsg) handleBotUtter(initMsg);\n      })\n\n      .on(\"bot_uttered\", handleBotUtter);\n\n    return () => sock.close();\n  }, []);\n\n  const restartSession = useCallback(\n    (sock, session_id) =>\n      sockRef.current.emit(\"session_request\", { session_id }),\n    []\n  );\n\n  const triggerRestartSession = async () => {\n    const sock = sockRef.current;\n    await sock.close();\n    await sock.open();\n  };\n\n  const userUtter = useCallback(\n    (text, payload) => {\n      sockRef.current.emit(\"user_uttered\", {\n        session_id: sessionIdRef.current,\n        message: payload || text,\n      });\n    },\n\n    []\n  );\n\n  const send = useCallback(\n    (message) => {\n      userUtter(message);\n    },\n    [userUtter]\n  );\n\n  const handleBotUtter = useCallback(\n    (msg) => {\n      const msgTpl = {\n        ts: Date.now(),\n        direction: \"in\",\n        metadata: msg.metadata,\n      };\n\n      onUtter({ ...msgTpl, ...msg });\n    },\n    [onUtter]\n  );\n\n  return {\n    send,\n    botUtter: handleBotUtter,\n    restartSession,\n    triggerRestartSession,\n  };\n};\n\nconst noop = () => null;\n\nconst socketErrorEventNames = [\n  \"error\",\n  \"connect_error\",\n  \"connect_timeout\",\n  \"reconnect_error\",\n  \"reconnect_failed\",\n  \"disconnect\",\n];\n\nexport default useAssistant;\n","import {useEffect, useReducer, useRef, useState} from \"react\";\n\nconst useSpeechRecognize = (onResult = () => null, onNoMatch = () => null) => {\n  const [recognition, setRecognition] = useState(null);\n  const [transcript, setTranscript] = useState(null);\n  const [listening, dispatchListen] = useReducer(\n    (state, action) => {\n      switch (action.type) {\n        case \"start\":\n          return true;\n        case \"stop\":\n          return false;\n        default:\n          throw new Error(\"Unexpected action\");\n      }\n    },\n    false,\n    undefined\n  );\n  const listenRef = useRef(false);\n\n  useEffect(() => {\n    listenRef.current = listening;\n  }, [listening]);\n\n  useEffect(() => {\n    if (\"speechSynthesis\" in window) {\n      try {\n        // new speech recognition object\n        const SpeechRecognition =\n          typeof window !== \"undefined\" &&\n          (window.SpeechRecognition || window.webkitSpeechRecognition);\n\n        const recognizeObj = new SpeechRecognition();\n\n        setRecognition(recognizeObj);\n\n        recognizeObj.onstart = () => {\n          console.log(\"Voice recognition started.\");\n          dispatchListen({ type: \"start\" });\n        };\n\n        recognizeObj.onresult = (event) => {\n          let final_transcript = \"\";\n          for (let i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal) {\n              final_transcript += event.results[i][0].transcript;\n            }\n          }\n\n          dispatchListen({ type: \"stop\" });\n\n          console.log(\"Final result: \" + final_transcript);\n\n          setTranscript(final_transcript);\n          onResult(final_transcript);\n        };\n\n        recognizeObj.onnomatch = () => {\n          console.log(\"No match found.\");\n          onNoMatch();\n        };\n\n        recognizeObj.onerror = () => {\n          console.log(\"No match found.\");\n          onNoMatch();\n        };\n\n        setRecognition(recognizeObj);\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      console.log(\"Speech recognition not supported 😢\");\n    }\n  }, []);\n\n  const startRecognize = () => {\n    recognition.start();\n  };\n\n  const getListening = () => {\n    return listenRef.current;\n  };\n\n  return { recognition, transcript, startRecognize, getListening };\n};\n\nexport default useSpeechRecognize;\n","import {useEffect, useRef, useState} from \"react\";\nimport useAsyncQueue from \"use-async-queue\";\nimport * as sdk from \"microsoft-cognitiveservices-speech-sdk\";\n\nconst useSpeechSynthesis = (\n  speakFunc = () => null\n) => {\n  const { add } = useAsyncQueue({\n    concurrency: 1,\n  });\n\n  const [id, setId] = useState(0);\n  const [text, setText] = useState(\"\");\n\n  const idRef = useRef(0);\n  const textRef = useRef(\"\");\n\n  useEffect(() => {\n    idRef.current = id;\n  }, [id]);\n\n  useEffect(() => {\n    textRef.current = text;\n  }, [text]);\n\n  const getId = () => {\n    return idRef.current;\n  };\n\n  const getText = () => {\n    return textRef.current;\n  };\n\n  const incrementId = () => {\n    setId(id + 1);\n  };\n\n  const speakSynthesis = (text = \"\") => {\n    incrementId();\n    add({\n      id: getId(),\n      task: () => {\n        return speakFunc(synthesizeSpeech(text), text, setText);\n      },\n    });\n  };\n\n  const synthesizeSpeech = (text = \"\") => {\n    return new Promise((resolve, reject) => {\n      const speechConfig = sdk.SpeechConfig.fromSubscription(\n        \"6a15144b41b74b66bd68b9d11d2ba8cd\",\n        \"southeastasia\"\n      );\n      const audioConfig = null;\n      const synthesizer = new sdk.SpeechSynthesizer(speechConfig, audioConfig);\n      synthesizer.speakTextAsync(\n        text,\n        (result) => {\n          synthesizer.close();\n          resolve(result.audioData);\n        },\n        (error) => {\n          console.log(error);\n          synthesizer.close();\n          reject(error);\n        }\n      );\n    });\n  };\n\n  return { speakSynthesis, getText };\n};\n\nexport default useSpeechSynthesis;\n","import useAssistant from \"../RasaAssistant\";\nimport useSpeechRecognize from \"./SpeakRecognize\";\nimport useSpeechSynthesis from \"./SpeakSynthesisBeta\";\n\nexport const useVoiceModule = (playSound) => {\n  const { send, triggerRestartSession } = useAssistant({\n    sockUrl: \"http://localhost:5005/socket.io/\",\n    sockOpts: { transports: [\"websocket\"] },\n    onUtter: (message) => {\n      speakSynthesis(message.text);\n    },\n  });\n\n  const handleNewUserMessage = (message) => {\n    send(message);\n  };\n\n  const handleNoMatchRecoginition = () => {\n    const message =\n      \"I am sorry. I cannot hear you. Please speak louder and clearer.\";\n    speakSynthesis(message);\n  };\n\n  const { startRecognize } = useSpeechRecognize(\n    handleNewUserMessage,\n    handleNoMatchRecoginition\n  );\n  //const { speakSynthesis, getText } = useSpeechSynthesis(\"en-US\", \"Microsoft\");\n  const { speakSynthesis, getText } = useSpeechSynthesis(playSound);\n\n  return { getText, startRecognize, triggerRestartSession };\n};\n\nexport default useVoiceModule;\n","import React from \"react\";\nimport \"../../css/cheatsheet.css\";\n\nconst CheatSheet = () => {\n  return (\n    <div className=\"cheat-card\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Cheat Sheet</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">\n            Quick guide to get started using the system\n          </h6>\n          <ul className=\"list-group card-text\">\n            <li className=\"list-group-item\">\n              <h6>What...?</h6>\n              <p className=\"small\">\n                Ask the explanation of many things related to the CS School such\n                as the current Dean, computer science meaning or major subjects.\n              </p>\n            </li>\n            <li className=\"list-group-item\">\n              <h6>Where...?</h6>\n              <p className=\"small\">\n                Ask the direction to many places in the CS School such as Dean's\n                Office, School Office or Surau.\n              </p>\n            </li>\n            <li className=\"list-group-item\">\n              <h6>Why / How...?</h6>\n              <p className=\"small\">\n                Inquiry about many subjects about the CS School such as the\n                reasoning behind internship programme, graduate requirements or\n                and others.\n              </p>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheatSheet;\n","import React, {useRef} from \"react\";\nimport \"../../css/live2dviewer.css\";\nimport {Application} from \"@pixi/app\";\nimport {Ticker, TickerPlugin} from \"@pixi/ticker\";\nimport {Live2DModel} from \"pixi-live2d-display/lib/cubism4\";\nimport useAudioMeasure from \"../AudioMeasure\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Subtitle from \"../Subtitle\";\nimport useVoiceModule from \"../VoiceModule\";\nimport CheatSheet from \"../CheatSheet\";\n\nApplication.registerPlugin(TickerPlugin);\nLive2DModel.registerTicker(Ticker);\n\nconst Live2DViewer = () => {\n  const containerRef = useRef();\n  const canvasRef = useRef();\n  const appRef = useRef();\n  const modelRef = useRef();\n\n  const { playSoundOmega, getAudioLevel } = useAudioMeasure();\n  const { getText, startRecognize } = useVoiceModule(playSoundOmega);\n\n  useAsyncEffect(async () => {\n    appRef.current = new Application({\n      view: canvasRef.current,\n      autoStart: true,\n      backgroundColor: 0xffe79e,\n      resizeTo: containerRef.current,\n    });\n    await Live2DModel.from(\"Haru/haru_greeter_t03.model3.json\").then(\n      (model) => {\n        model.scale.set(0.3);\n\n        const updateFn = model.internalModel.motionManager.update;\n        model.internalModel.motionManager.update = (...args) => {\n          updateFn.apply(model.internalModel.motionManager, args);\n\n          model.internalModel.coreModel.setParameterValueById(\n            \"ParamMouthOpenY\",\n            getAudioLevel()\n          );\n        };\n        appRef.current.stage.addChild(model);\n        modelRef.current = model;\n\n        appRef.current.stage.children[0].x = appRef.current.stage.width / 2;\n      }\n    );\n  }, []);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    startRecognize();\n  };\n\n  return (\n    <div className=\"live2d-viewer\" ref={containerRef}>\n      <canvas ref={canvasRef} />\n      <Subtitle text={getText()} />\n      <button\n        className=\"btn btn-lg btn-primary speak-btn\"\n        onClick={handleClick}\n      >\n        SPEAK\n      </button>\n      <CheatSheet />\n    </div>\n  );\n};\n\nexport default Live2DViewer;\n","import React from \"react\";\nimport Live2DViewer from \"./components/Live2DViewer\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Live2DViewer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}